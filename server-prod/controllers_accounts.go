package main

import (
	"context"
	"encoding/json"
	"log"
	"net/http"

	firebase "firebase.google.com/go"
	"google.golang.org/api/option"
)

// Add account information in firestore (id, email, plan)
func controllers_accounts_create_user_account_in_firestore(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "POST,OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
	sa := option.WithCredentialsFile("./firestore.json")
	app, err := firebase.NewApp(context.Background(), nil, sa)
	if err != nil {
		log.Fatalln(err)
	}
	client, err := app.Firestore(context.Background())
	if err != nil {
		log.Fatalln(err)
	}
	defer client.Close()

	var account Account
	decoder := json.NewDecoder(r.Body)
	decoder.Decode(&account)
	if err != nil {
		panic(err)
	}

	// Client usually makes 2 requests to backend; 1 options; 1 post, need to filter out options request
	if r.Method != "OPTIONS" {
		// Creating in 'accounts' collection, with the ID generated by Firebase Authentication UID
		client.Collection("accounts").Doc(account.ID).Set(context.Background(), map[string]interface{}{
			"accountid":    account.ID,
			"emailaddress": account.Email,
			"plan":         account.Plan,
		})
	}
}

// Get account information in firestore (id, email, plan)
func controllers_accounts_get_user_account_information_in_firestore(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET,OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
	sa := option.WithCredentialsFile("./firestore.json")
	app, err := firebase.NewApp(context.Background(), nil, sa)
	if err != nil {
		log.Fatalln(err)
	}
	client, err := app.Firestore(context.Background())
	if err != nil {
		log.Fatalln(err)
	}
	defer client.Close()

	var account Account
	decoder := json.NewDecoder(r.Body)
	decoder.Decode(&account)
	if err != nil {
		panic(err)
	}

	// Client usually makes 2 requests to backend; 1 options; 1 post, need to filter out options request
	if r.Method != "OPTIONS" {
		// Creating in 'accounts' collection, with the ID generated by Firebase Authentication UID
		client.Collection("accounts").Doc(account.ID).Set(context.Background(), map[string]interface{}{
			"accountid":    account.ID,
			"emailaddress": account.Email,
			"plan":         account.Plan,
		})
	}
}
